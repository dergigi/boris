import { PasswordSigner } from "applesauce-signers/signers/password-signer";
import { BaseAccount } from "../account.js";
import { SerializedAccount } from "../types.js";
export type PasswordAccountSignerData = {
    ncryptsec: string;
};
export declare class PasswordAccount<Metadata extends unknown = unknown> extends BaseAccount<PasswordSigner, PasswordAccountSignerData, Metadata> {
    static readonly type = "ncryptsec";
    get unlocked(): boolean;
    /** called when PasswordAccount.unlock is called without a password */
    static requestUnlockPassword?: (account: PasswordAccount<any>) => Promise<string>;
    /**
     * Attempt to unlock the signer with a password
     * @throws
     */
    unlock(password?: string): Promise<void>;
    protected operation<T extends unknown>(operation: () => Promise<T>): Promise<T>;
    toJSON(): SerializedAccount<PasswordAccountSignerData, Metadata>;
    static fromJSON<Metadata extends unknown>(json: SerializedAccount<PasswordAccountSignerData, Metadata>): PasswordAccount<Metadata>;
    /** Creates a new PasswordAccount from a ncryptsec string */
    static fromNcryptsec<Metadata extends unknown>(pubkey: string, ncryptsec: string): PasswordAccount<Metadata>;
}
