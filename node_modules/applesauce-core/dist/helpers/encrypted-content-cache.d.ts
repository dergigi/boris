import { NostrEvent } from "nostr-tools";
import { Observable } from "rxjs";
import { IEventStoreStreams } from "../event-store/interface.js";
/** A symbol that is used to mark encrypted content as being from a cache */
export declare const EncryptedContentFromCacheSymbol: unique symbol;
/** An interface that is used to cache encrypted content on events */
export interface EncryptedContentCache {
    getItem: (key: string) => Promise<string | null>;
    setItem: (key: string, value: string) => Promise<any>;
}
/** Marks the encrypted content as being from a cache */
export declare function markEncryptedContentFromCache<T extends object>(event: T): void;
/** Checks if the encrypted content is from a cache */
export declare function isEncryptedContentFromCache<T extends object>(event: T): boolean;
/**
 * Starts a process that persists and restores all encrypted content
 * @param eventStore - The event store to listen to
 * @param storage - The storage to use
 * @param fallback - A function that will be called when the encrypted content is not found in storage
 * @returns A function that can be used to stop the process
 */
export declare function persistEncryptedContent(eventStore: IEventStoreStreams, storage: EncryptedContentCache | Observable<EncryptedContentCache>, fallback?: (event: NostrEvent) => any | Promise<any>): () => void;
