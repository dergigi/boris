import { NostrEvent } from "nostr-tools";
import { HiddenContentSigner } from "./index.js";
export declare const MutePublicSymbol: unique symbol;
export declare const MuteHiddenSymbol: unique symbol;
/** Type for unlocked mute events */
export type UnlockedMutes = {
    [MuteHiddenSymbol]: Mutes;
};
export type Mutes = {
    pubkeys: Set<string>;
    threads: Set<string>;
    hashtags: Set<string>;
    words: Set<string>;
};
/** Merges any number of mute sets */
export declare function mergeMutes(...mutes: Mutes[]): Mutes;
/** Parses mute tags */
export declare function parseMutedTags(tags: string[][]): Mutes;
/** Returns muted things */
export declare function getMutedThings(mute: NostrEvent): Mutes;
/** Returns only the public muted things from a mute event */
export declare function getPublicMutedThings(mute: NostrEvent): Mutes;
/** Checks if the hidden mutes are unlocked */
export declare function isHiddenMutesUnlocked<T extends NostrEvent>(mute: T): mute is T & UnlockedMutes;
/** Returns the hidden muted content if the event is unlocked */
export declare function getHiddenMutedThings<T extends NostrEvent & UnlockedMutes>(mute: T): Mutes;
export declare function getHiddenMutedThings<T extends NostrEvent>(mute: T): Mutes | undefined;
/** Unlocks the hidden mutes */
export declare function unlockHiddenMutes(mute: NostrEvent, signer: HiddenContentSigner): Promise<Mutes>;
/** Creates a RegExp for matching muted words */
export declare function createMutedWordsRegExp(mutedWords: string[]): RegExp;
/** Returns true if the event matches the mutes */
export declare function matchMutes(mutes: Mutes, event: NostrEvent): boolean;
