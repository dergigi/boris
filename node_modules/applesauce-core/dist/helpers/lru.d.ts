type Item<T> = {
    key: string;
    prev: Item<T> | null;
    value: T;
    next: Item<T> | null;
    expiry: number;
};
/**
 * Copied from tiny-lru and modified to support typescript
 * @see https://github.com/avoidwork/tiny-lru/blob/master/src/lru.js
 */
export declare class LRU<T extends unknown> {
    first: Item<T> | null;
    items: Record<string, Item<T>>;
    last: Item<T> | null;
    max: number;
    resetTtl: boolean;
    size: number;
    ttl: number;
    constructor(max?: number, ttl?: number, resetTtl?: boolean);
    clear(): this;
    delete(key: string): this;
    entries(keys?: string[]): (string | T | undefined)[][];
    evict(bypass?: boolean): this;
    expiresAt(key: string): number | undefined;
    get(key: string): T | undefined;
    has(key: string): boolean;
    keys(): string[];
    set(key: string, value: T, bypass?: boolean, resetTtl?: boolean): this;
    values(keys?: string[]): NonNullable<T>[];
}
export {};
