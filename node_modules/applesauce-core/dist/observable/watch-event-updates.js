import { filter, map, merge, tap } from "rxjs";
/** Watches for any updates to the latest event and remits the event when updated */
export function watchEventUpdates(eventStore) {
    return (source) => {
        let latest;
        return merge(
        // Get the latest event
        source.pipe(tap((value) => (latest = value))), 
        // listen for updates
        eventStore.update$.pipe(filter((e) => e.id === latest?.id)));
    };
}
/** Watches for any updates to the latest array of events and remits the array of events when updated */
export function watchEventsUpdates(eventStore) {
    return (source) => {
        let latest = [];
        return merge(
        // Get the latest event
        source.pipe(tap((value) => (latest = value))), 
        // listen for updates
        eventStore.update$.pipe(filter((e) => latest.includes(e)), 
        // re-emit the array of events
        map(() => latest)));
    };
}
